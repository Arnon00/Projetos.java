package chatsimples; //pacote importado com as configura√ß√µes do chat
//imports necess√°rios para cria√ß√£o da janela.
import java.awt.event.KeyEvent;  //awt para habilitar os eventos da janela.
import java.util.Observable; //padr√£o observ√°vel do projeto
import java.util.Observer; //traz o padr√£o observador ao c√≥digo.

public class JanelaChat extends javax.swing.JFrame implements Observer { //classe estende os componentes Swing e implementa o padr√£o observer.

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Conexao conexao; //cria o atributo conex√£o.

    public JanelaChat(Conexao conexao) { //cria a janela de chat e chama a conex√£o.
        super("Chat"); //super classe do chat
        this.conexao = conexao; //chama o atributo conex√£o
        initComponents(); //inicializa os componentes.
        conexao.addObserver(this); //a conex√£o implementa o padr√£o observer
        escreve("Chat iniciado com " + conexao.getIp() + ":" + conexao.getPorta()); //chat iniciado com  + pega o n√∫mero de ip e a porta de quem come√ßou a conversa.
        mensagemjTextArea.requestFocusInWindow(); //foca o cursor na parte que √© poss√≠vel digitar a mensagem.
    }

    private void envia() { //m√©todo para enviar mensagens
        if (!mensagemjTextArea.getText().isEmpty()) { //confirma se a caixa de texto n√£o est√° vazia.
            conexao.envia(mensagemjTextArea.getText()); //ent√£o captura o texto, o envia a mensagem
            escreve("Voce disse: "+mensagemjTextArea.getText()); //voc√™ disse + pega o texto que est√° na caixa de mensagem.
            mensagemjTextArea.setText(""); //pega o texto da caixa de mensagem.
        }
    }

    private void escreve(String texto){ //metodo para escrever mensagem.
        chatjTextArea.append(texto+"\n"); //organiza a mensagem e concatena com o texto.
         if (!chatjTextArea.getText().isEmpty() && !chatjTextArea.isFocusOwner()) { //confirma se a caixa de texto est√° vazia r foca na caixa de texto.
                chatjTextArea.setCaretPosition(chatjTextArea.getText().length() - 1); //vai andando o cursor ate ler toda a mensagem.
            }

    }

   

    private void initComponents() { //m√©todo para inicializar os componenetes e formar a janela.

        jScrollPane1 = new javax.swing.JScrollPane(); //painel
        chatjTextArea = new javax.swing.JTextArea(); //caixa de texto
        jScrollPane2 = new javax.swing.JScrollPane();//segundo painel
        mensagemjTextArea = new javax.swing.JTextArea(); //caixa de texto
        enviarjButton = new javax.swing.JButton(); //bot√£o para enivar mensagem

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); //fecha ajanela do chat

        chatjTextArea.setEditable(false); //n√£o permite a edi√ß√£o do formul√°rio
        chatjTextArea.setColumns(20); //colunas da janela
        chatjTextArea.setRows(5); //linhas da janela
        jScrollPane1.setViewportView(chatjTextArea); //qual √°rea ser√° apresentada

        mensagemjTextArea.setColumns(20);//colunas da √°rea da mensagem
        mensagemjTextArea.setRows(5); //linhas da √°rea de mensagem
        mensagemjTextArea.addKeyListener(new java.awt.event.KeyAdapter() { //key listener -: Utilizado para ‚Äúouvir‚Ä? eventos que s√£o disparados pelo pressionamento, libera√ß√£o ou digita√ß√£o de uma tecla qualquer, em resumo: O uso do teclado.
            public void keyReleased(java.awt.event.KeyEvent evt) { //percep√ß√£o dos eventos
                mensagemjTextAreaKeyReleased(evt); //evento para let o que cont√©m na caixa de texto
            }
        });
        jScrollPane2.setViewportView(mensagemjTextArea); //segundo painel

        enviarjButton.setText("Enviar"); //bot√£o de envio
        enviarjButton.addActionListener(new java.awt.event.ActionListener() { // ativa o action listener do bot√£o
            public void actionPerformed(java.awt.event.ActionEvent evt) { // respons√°vel por tomar alguma a√ß√£o caso algum evento ocorra.
                enviarjButtonActionPerformed(evt); //configura o bot√£o com o poder de ser actionPerformed
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane()); //configura o tipo de layout da ajanela
        getContentPane().setLayout(layout); //obt√©m o Layout
        layout.setHorizontalGroup( //configura o layout horizontal.
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) //cria um alinhamento paralelo.
            .addComponent(jScrollPane1) //adiciona o componente.
            .addGroup(layout.createSequentialGroup() //cria um layout sequencial.
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE) //adiciona mais um componente
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enviarjButton, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)) //adiciona o bot√£o enviar
        );
        layout.setVerticalGroup(  //configura o grupo vertical
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) //cria um grupo paralelo.
            .addGroup(layout.createSequentialGroup() //adiciona esse grupo de forma sequencial.
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE) //configura o tamanho
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED) //configura o layout.
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false) //cria grupo paralelo.
                    .addComponent(jScrollPane2) //adiciona o componente
                    .addComponent(enviarjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) //adiciona o bot√£o
                .addGap(0, 0, Short.MAX_VALUE)) //configura a posi√ß√£o.
        );

        pack();
    }

    private void enviarjButtonActionPerformed(java.awt.event.ActionEvent evt) { //m√©todo para configurar o bot√£o enovar                                             
        envia();
    }

    private void mensagemjTextAreaKeyReleased(java.awt.event.KeyEvent evt) {
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            envia();
        }
    }

    // Variables declaration - do not modify
    private javax.swing.JTextArea chatjTextArea;
    private javax.swing.JButton enviarjButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea mensagemjTextArea;
    // End of variables declaration

    
    public void update(Observable o, Object arg) {
        escreve(conexao.getMensagem());
    }
}
